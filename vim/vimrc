set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
if !has("compatible")
   set rtp+=~/.vim/bundle/Vundle.vim
   call vundle#begin()

   " let Vundle manage Vundle, required
   Plugin 'VundleVim/Vundle.vim'

   Plugin 'scrooloose/syntastic'
   Plugin 'LaTeX-Box-Team/LaTeX-Box'
   Plugin 'WolfgangMehner/bash-support'
   Plugin 'WolfgangMehner/awk-support'
   Bundle 'surround.vim'
   Bundle 'repeat.vim'
   Bundle 'fortran.vim'
   Plugin 'altercation/vim-colors-solarized'
   Plugin 'scrooloose/nerdcommenter'
   Bundle 'gnuplot.vim'
   Bundle 'christoomey/vim-tmux-navigator'
   Plugin 'benmills/vimux'
   Plugin 'tmhedberg/SimpylFold'
   Plugin 'vim-scripts/indentpython.vim'
   Plugin 'tpope/vim-fugitive'
   Plugin 'shumphrey/fugitive-gitlab.vim'
   Plugin 'jaxbot/github-issues.vim'
   Plugin 'https://git.rwth-aachen.de/pascal.hebbeker/gitlab-issues.git'

   "
   call vundle#end()            " required
endif
filetype plugin indent on    " required

filetype plugin on
set encoding=utf-8
set spelllang=en_us

let mapleader = "\<Space>"

"simply Fold
let g:SimpylFold_docstring_preview=1

let g:github_issues_no_omni=1

"syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0 " Don't auto open/close location list
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map={"mode" : "passive"}
let g:syntastic_enable_signs=1
let g:syntastic_quiet_messages = {
   \ "regex": "\\max"}
let g:syntastic_fortran_compiler = "ifort"
nnoremap <leader>sc :SyntasticCheck<CR>

"tex
let g:tex_flavor='latex'
let g:tex_comment_nospell= 1
let g:LatexBox_Folding = 1
let g:LatexBox_fold_envs = 0
let g:LatexBox_fold_preamble = 1
let g:LatexBox_fold_automatic = 0
au BufEnter,BufNew *.tex set spell
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"
au FileType tex map <leader>mm :w<enter>:call VimuxRunCommand('make ')<enter> 
au FileType tex map <leader>me :LatexErrors<enter>

"bash-support
let g:BASH_Executable			= '/bin/bash'
let g:BASH_OutputGvim                   = "buffer"
source $VIMRUNTIME/menu.vim
set wildmenu
set cpo-=<
set wcm=<C-Z>
map <F4> :emenu <C-Z>


"awk-support
let g:Awk_OutputGvim                   = "buffer"

"Markdown
autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown
au FileType markdown set spell

if !has("compatible")
   command! Nline :normal i<enter><Esc>

   "functions to automatically change date in bash/awk files
   function! Datef()
      Nline
      normal k
      r !date +"\%F \%R"
      normal k
      normal 3J
   endfunction

   function! Adaptrevdate()
      if getline(17) =~#"^#      REVISION: .*"
         let b:newdate = substitute(system('date +"%F %R"'), "^", "#      REVISION: ", "")
         17s/^.*$/\=b:newdate/"
         ''
         18d
         ''
      endif
   endfunction

   "autocmd Filetype sh autocmd BufWritePre,FileWritePre *.sh :call Adaptrevdate()
   "autocmd Filetype awk autocmd BufWritePre,FileWritePre *.awk :call Adaptrevdate()

   function! Adaptcreatedate()
      if getline(16) =~#"^#       CREATED: .*"
         let b:newdate = substitute(system('date +"%F %R"'), "^", "#       CREATED: ", "")
         16s/.*/\=b:newdate/
         ''
         17d
         ''
      endif
      if getline(4) =~#"^#          FILE: .*"
         let b:file = substitute(expand("%:t"), "^", "#          FILE: ", "")
         4s/^.*$/\=b:file/"
         ''
      endif
      if getline(6) =~#"^#         USAGE: \./[a-zA-Z0-9_]*\.sh.*"
         let b:file = expand("%:t")
         6s/[a-zA-Z0-9_]*\.sh/\=b:file/"
         ''
      endif
   endfunction

   command! Date :call Datef()
endif

"fortran.vim
let fortran_free_source=1
let fortran_do_enddo=1
let fortran_have_tabs=1

function! Gotofprocedure()
   let pos = getpos(".")
" goto beginning of word and yank it
   normal heb
   normal "pyiw
   let procname = @p
" get type of procedure
   normal b
   normal "pyiw
   let typename = @p
   if typename ==? "call"
      let prestring = "subroutine"
   else
      let prestring = "function"
   endif
   let dir=expand('%:p:h')
   "echo dir
" how many occurences of this poricedure exist?
   let proc=system('grep -l "^ *' . prestring . ' *' . procname . '[ (]" ' . dir . '/*.F90')
   let nproc=system('echo "' . proc . '" | wc -w ')
   "echo nproc
   
   if nproc == 1
      "only one: open in preview
      let file=proc
      execute ':ped! +/^\ *' . prestring . '\ *' . procname . '[\ (] ' . file
   else
      "only more: give information
      echo 'Found more than one occurence of the ' . prestring . ' in the files:'
      echo system('grep -l "^ *' . prestring . ' ' . procname . '[ (]" ' . dir . '/*.F90 | uniq -c ')
   endif
   call setpos('.', pos)
endfunction
au FileType fortran map <leader>fs :call Gotofprocedure() <CR>

"solarized
syntax enable
"set background=light
set background=dark

let solenv=$SOLVAR
if solenv == "light"
set background=light
endif
if solenv == "dark"
set background=dark
endif
set t_Co=256
silent! colorscheme solarized

" save and restore folds when a file is closed and re-opened
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* loadview 
"save view in tmp folder to delete then regulary


" These are highly recommended options.

" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches 
set hlsearch

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set smartindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=
" 
" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F4> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F4>

" wrap lines at breakat
set wrap
set linebreak


"------------------------------------------------------------
" Indentation options

" Indentation settings for using 3 spaces instead of tabs.
set shiftwidth=3
set softtabstop=3
set expandtab

"python
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

let python_highlight_all=1

"------------------------------------------------------------
" Mappings
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <leadr>nn turn off search highlighting until the
" next search
nmap <leader>nn :nohl<enter>

" allow for <enter> to create new line
nmap <S-Enter> O<Esc>j
nmap <CR> o<Esc>k

"------------------------------------------------------------

"spelling
hi clear SpellBad
hi SpellBad cterm=underline

"set clipboard to system cliboard
set clipboard=unnamed

"gnuplot
au BufRead,BufNewFile *.gpl,*.gpi set filetype=gnuplot

"syntax
filetype indent off
syntax on

" increment selected numbers
set nf=octal,hex,alpha
function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

" format options
set formatoptions-=t
set formatoptions-=c
autocmd BufNewFile,BufRead * setlocal formatoptions-=tc

" easy split
set splitbelow
set splitright

" do not use arrow keys!
noremap <Up>    :echo "Stop using arrow keys, stupid" <enter>
noremap <Down>  :echo "Stop using arrow keys, stupid" <enter>
noremap <Left>  :echo "Stop using arrow keys, stupid" <enter>
noremap <Right> :echo "Stop using arrow keys, stupid" <enter>
inoremap <Up>    <Esc>:echo "Stop using arrow keys, stupid" <enter> i
inoremap <Down>  <Esc>:echo "Stop using arrow keys, stupid" <enter> i
inoremap <Left>  <Esc>:echo "Stop using arrow keys, stupid" <enter> i
inoremap <Right> <Esc>:echo "Stop using arrow keys, stupid" <enter> i

"function! SetupSrc()
  "echo "setupsrc"
  "let fname = expand("%:p")
  "checktime
  "execute "au FileChangedShell " . fname . " :echo"
  "!chmod a+x %
  "execute('! cd ~/bin ; ln -s src/' . expand('%') . ' ' . expand('%:r') . ' ; cd - ')
  "checktime
  "execute "au! FileChangedShell " . fname
"endfunction

" Switch between block and vertical cursor
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

map <F9> :w<enter>:call VimuxRunCommand('make ')<enter>
map <F10> :w<enter>:call VimuxRunCommand('make run')<enter>

"custom copy'n'paste

vmap <leader>y :w! /tmp/$USER/.vim/vbuf<CR>
nmap <leader>y :.w! /tmp/$USER/.vim/vbuf<CR>
nmap <leader>p :r /tmp/$USER/.vim/vbuf<CR>

""navigate tabs
nmap <leader>h :tabprevious<CR>
nmap <leader>l :tabnext<CR>

"Vimux
" Inspect runner pane
map <F5> :w<enter>:VimuxRunCommand "./".expand('%') <enter>
" Run last command executed by VimuxRunCommand
map <F6> :w<enter>:VimuxRunLastCommand<enter>
" Prompt for a command to run
map <F7> :w<enter>:VimuxPromptCommand<enter>
" Interrupt any command running in the runner pane
map <F8> :VimuxInterruptRunner<enter>
let g:VimuxOrientation = "h"

" Initialize Directories
function! InitializeDirectories()
   let separator = "."
   let parent = "/tmp/".$USER.""
   let prefix = '.vim/'
   let dir_list = { 'views/': 'viewdir'}
   let dir_list = { 'undo/': 'undodir'}

   for [dirname, settingname] in items(dir_list)
       let directory = parent . '/' . prefix . dirname . "/"
       if exists("\*mkdir")
           if !isdirectory(directory)
               call mkdir(directory, "p")
           endif
       endif
       if !isdirectory(directory)
           echo "Warning: Unable to create backup directory: " .
directory
           echo "Try: mkdir -p " . directory
       else 

           let directory = substitute(directory, " ", "\\\\\\\\ ", "")
           exec "set " . settingname . "=" . directory
       endif
   endfor
 endfunction
 call InitializeDirectories() 

if has('persistent_undo')      "check if your vim version supports it
  set undofile
endif    
