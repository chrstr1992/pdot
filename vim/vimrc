set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/syntastic'
"Bundle 'git://git.code.sf.net/p/vim-latex/vim-latex'
Bundle 'Tex-9'
Bundle 'bash-support.vim'
Bundle 'awk-support.vim'
Bundle 'surround.vim'
Bundle 'repeat.vim'
Bundle 'fortran.vim'
Bundle 'fortran_codecomplete.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdcommenter'
Bundle 'gnuplot.vim'
Plugin 'benmills/vimux'

"
call vundle#end()            " required
filetype plugin indent on    " required

filetype plugin on

"InstallVim
function! InstallVim(mach)
   silent !echo $'In bashrc Template change your name etc. Recomendet date Format:\n DATE: \%F \n TIME: \%H:\%M \n YEAR : ""' > /tmp/viminstallbash
   silent !vim +PluginInstall +qall ; echo "Installed Plugins"
   tabe +5 ~/.vim/bundle/bash-support.vim/bash-support/templates/Templates
   pedit /tmp/viminstallbash
   if a:mach ==? "cluster"
      echo "skip latexmk"
   else
      silent !echo $'This Installscript utilizes latexmk. If latexmk is not available configure it by hand.\n In the .latexmkrc the following is recomended:\n $pdf_previewer = "start $PATHTOPDFVIEWER"; $pdf_mode = 1; $bibtex_use = 2; $pdflatex = \"pdflatex --shell-escape \%O \%S\";' > /tmp/viminstall
      tabe ~/.latexmkrc
      pedit /tmp/viminstall
   endif
endfunction
map <SPACE> <leader>

"syntastic
let g:syntastic_quiet_messages = {
   \ "regex": "\\max"}
let g:syntastic_fortran_compiler = "ifort"

""vim-latex
"" " IMPORTANT: grep will sometimes skip displaying the file name if you
"" " search in a singe file. This will confuse Latex-Suite. Set your grep
"" " program to always generate a file-name.
"set grepprg=grep\ -nH\ $*
"let g:Tex_DefaultTargetFormat = 'pdf'
"let g:Tex_CompileRule_pdf = 'latexmk -pdf $*'
"let g:Tex_ViewRule_pdf = 'latexmk -quiet -pv $* &> /dev/null '
au BufEnter,BufNew *.dtx map <F9> :w<enter>:!pdflatex % <enter>
"au BufEnter,BufNew *.tex map <F8> <leader>lv
""working only in terminal ... therefore disabling menus
"let g:Tex_Menus = 0
"let g:Tex_PackagesMenu = 0
"let g:Tex_GotoError=0
"tex
let g:tex_flavor='latex'
let g:tex_comment_nospell= 1
let g:tex_fold_enabled = 1
au BufEnter,BufNew *.tex set spell
set spelllang=en_us
let g:tex_nine_config ={
   \'compiler':   'latexmk -pdf $*',
   \'viewer':     {'app': 'latexmk -quiet -pv $* &> /dev/null', 'target':'tex'},
   \}
let g:surround_{char2nr('c')} = "\\\1command\1{\r}"

" 
"bash-support
" " OPTIONAL: This enables automatic indentation as you type.
" " filetype indent on
" 
autocmd Filetype sh map <F9> :w<enter>:!./% <enter>
let g:BASH_Executable			= '/bin/bash'
let g:BASH_OutputGvim                   = "buffer"

"awk-support
let g:Awk_OutputGvim                   = "buffer"


command! Nline :normal i<enter><Esc>

function! Datef()
   Nline
   normal k
   r !date +"\%F \%R"
   normal k
   normal 3J
endfunction

function! Adaptrevdate()
   if getline(17) =~#"^#      REVISION: .*"
      let b:newdate = substitute(system('date +"%F %R"'), "^", "#      REVISION: ", "")
      17s/^.*$/\=b:newdate/"
      ''
      18d
      ''
   endif
endfunction
autocmd Filetype sh autocmd BufWritePre,FileWritePre *.sh :call Adaptrevdate()

function! Adaptcreatedate()
   if getline(16) =~#"^#       CREATED: .*"
      let b:newdate = substitute(system('date +"%F %R"'), "^", "#       CREATED: ", "")
      16s/.*/\=b:newdate/
      ''
      17d
      ''
   endif
   if getline(4) =~#"^#          FILE: .*"
      let b:file = substitute(expand("%:t"), "^", "#          FILE: ", "")
      4s/^.*$/\=b:file/"
      ''
   endif
   if getline(6) =~#"^#         USAGE: \./[a-zA-Z0-9_]*\.sh.*"
      let b:file = expand("%:t")
      6s/[a-zA-Z0-9_]*\.sh/\=b:file/"
      ''
   endif
endfunction

command! Date :call Datef()

"fortran.vim
au BufEnter,BufNew *.F90 map <F9> :w<enter>:!make molsim_ser<enter>
let fortran_free_source=1
let fortran_do_enddo=1
let fortran_have_tabs=1

function! Gotofprocedure()
   let pos = getpos(".")
" goto beginning of word and yank it
   normal heb
   normal "pyiw
   let procname = @p
" get type of procedure
   normal b
   normal "pyiw
   let typename = @p
   if typename ==? "call"
      let prestring = "subroutine"
   else
      let prestring = "function"
   endif
   let dir=expand('%:p:h')
   "echo dir
" how many occurences of this poricedure exist?
   let proc=system('grep -l "^ *' . prestring . ' *' . procname . '[ (]" ' . dir . '/*.F90')
   let nproc=system('echo "' . proc . '" | wc -w ')
   "echo nproc
   
   if nproc == 1
      "only one: open in preview
      let file=proc
      execute ':ped! +/^\ *' . prestring . '\ *' . procname . '[\ (] ' . file
   else
      "only more: give information
      echo 'Found more than one occurence of the ' . prestring . ' in the files:'
      echo system('grep -l "^ *' . prestring . ' ' . procname . '[ (]" ' . dir . '/*.F90 | uniq -c ')
   endif
   call setpos('.', pos)
endfunction
au FileType fortran map <leader>fs :call Gotofprocedure() <CR>

"solarized
syntax enable
"set background=light
set background=dark

let solenv=$SOLVAR
if solenv == "light"
set background=light
endif
if solenv == "dark"
set background=dark
endif
set t_Co=256
colorscheme solarized

"------------------------------------------------------------
" Features
"
" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
" filetype indent plugin on
"
" save and restore folds when a file is closed and re-opened
autocmd BufWinLeave ?* mkview
autocmd BufWinEnter ?* silent loadview 
set viewdir=/tmp/$USER/vimviews


"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" One such option is the 'hidden' option, which allows you to re-use the same
" window and switch from an unsaved buffer without saving it first. Also allows
" you to keep an undo history for multiple files when re-using the same window
" in this way. Note that using persistent undo also lets you undo in multiple
" files even in the same window, but is less efficient and is actually designed
" for keeping undo history after closing Vim entirely. Vim will complain if you
" try to quit without saving, and swap files will keep you safe if your computer
" crashes.
set hidden

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches 
set hlsearch

"------------------------------------------------------------
" Usability options
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set smartindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Always display the status line, even if only one window is displayed
set laststatus=2

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=
" 
" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
set cmdheight=2

" Display line numbers on the left
set number

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F4>


"------------------------------------------------------------
" Indentation options

" Indentation settings for using 3 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.
set shiftwidth=3
set softtabstop=3
set expandtab
"set list

"------------------------------------------------------------
" Mappings
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-r> turn off search highlighting until the
" next search
nmap <leader>nn :nohl<enter>

" allow for <enter> to create new line
nmap <S-Enter> O<Esc>j
nmap <CR> o<Esc>k

"------------------------------------------------------------
" if &diff
"     colorscheme evening
" endif

hi clear SpellBad
hi SpellBad cterm=underline

set clipboard=unnamed

"gnuplot
au BufRead,BufNewFile *.gpl,*.gpi set filetype=gnuplot
au FileType gnuplot map <F9> :w<enter>:!pregnu % <enter>
au FileType gnuplot map <F5> :w<enter>:!gnuplot % <enter>
au FileType gnuplot map <F8> :w<enter>:!/cygdrive/c/Pascal_Programme/Sumatra/SumatraPDF.exe %<.pdf & <enter>

nmap <F12> :normal A   !Pascal Hebbeker <ESC>

filetype indent off
syntax on

" increment selected numbers
set nf=octal,hex,alpha
function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

" format options
set formatoptions-=t
set formatoptions-=c
autocmd BufNewFile,BufRead * setlocal formatoptions-=tc

" easy split
set splitbelow
set splitright

noremap <Up>    :echo "Stop using arrow keys, stupid" <enter>
noremap <Down>  :echo "Stop using arrow keys, stupid" <enter>
noremap <Left>  :echo "Stop using arrow keys, stupid" <enter>
noremap <Right> :echo "Stop using arrow keys, stupid" <enter>
inoremap <Up>    <Esc>:echo "Stop using arrow keys, stupid" <enter> i
inoremap <Down>  <Esc>:echo "Stop using arrow keys, stupid" <enter> i
inoremap <Left>  <Esc>:echo "Stop using arrow keys, stupid" <enter> i
inoremap <Right> <Esc>:echo "Stop using arrow keys, stupid" <enter> i

function! SetupSrc()
  echo "setupsrc"
  let fname = expand("%:p")
  checktime
  execute "au FileChangedShell " . fname . " :echo"
  !chmod a+x %
  execute('! cd ~/bin ; ln -s src/' . expand('%') . ' ' . expand('%:r') . ' ; cd - ')
  checktime
  execute "au! FileChangedShell " . fname
endfunction

let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

map <f10> :w<enter>:make<enter>
map <F11> :w<enter>:make<enter>:call VimuxRunCommand('make run')<enter>

nnoremap <c-H> gt
nnoremap <c-L> gT

" Prompt for a command to run
map rp :VimuxPromptCommand

" Run last command executed by VimuxRunCommand
map rl :w<enter>:VimuxRunLastCommand<enter>

" Inspect runner pane
map ri :VimuxInspectRunner<enter>

" Close all other tmux panes in current window
map rx :VimuxClosePanes<enter>

" Interrupt any command running in the runner pane
map rs :VimuxInterruptRunner<enter>

function! InitializeDirectories()
   let separator = "."
   let parent = "/tmp/".$USER.""
   let prefix = '.vim/'
   let dir_list = { 'views/': 'viewdir'}

   for [dirname, settingname] in items(dir_list)
       let directory = parent . '/' . prefix . dirname . "/"
       if exists("\*mkdir")
           if !isdirectory(directory)
               call mkdir(directory, "p")
           endif
       endif
       if !isdirectory(directory)
           echo "Warning: Unable to create backup directory: " .
directory
           echo "Try: mkdir -p " . directory
       else  
           let directory = substitute(directory, " ", "\\\\\\\\ ", "")
           exec "set " . settingname . "=" . directory
       endif
   endfor
 endfunction
 call InitializeDirectories() 
